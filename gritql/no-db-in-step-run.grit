language js // Applies to JavaScript and TypeScript

// This rule bans any use of `db` or `tx` inside a step.run() closure.
// See `rules/no-db-in-step-run.mdc` for details on why this is banned
// and for the required alternative patterns.

or {
	// Case 1: step.run("name", callback)
	`step.run($_step_name, $callback_with_name)` as $step_run_call_with_name where {
		$callback_with_name <: or {
			`async () => { $body }`,
			`() => { $body }`,
			`async function $_ ($...) { $body }`,
			`function $_ ($...) { $body }`
		},
		$body <: contains or {
			`db.$_method($...)` as $db_usage,
			`tx.$_method($...)` as $db_usage
		},
		register_diagnostic(span=$db_usage, message="Using database operations (`db` or `tx`) inside a `step.run()` closure is strictly banned. Database operations should occur in the main function body. Refer to `rules/no-db-in-step-run.mdc` for required patterns.", severity="error")
	},
	// Case 2: step.run(callback)
	`step.run($callback_no_name)` as $step_run_call_no_name where {
		$callback_no_name <: or {
			`async () => { $body }`,
			`() => { $body }`,
			`async function $_ ($...) { $body }`,
			`function $_ ($...) { $body }`
		},
		$body <: contains or {
			`db.$_method($...)` as $db_usage,
			`tx.$_method($...)` as $db_usage
		},
		register_diagnostic(span=$db_usage, message="Using database operations (`db` or `tx`) inside a `step.run()` closure is strictly banned. Database operations should occur in the main function body. Refer to `rules/no-db-in-step-run.mdc` for required patterns.", severity="error")
	}
}
