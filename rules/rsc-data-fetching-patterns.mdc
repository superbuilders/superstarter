---
description: 
globs: src/app/**/*.tsx
alwaysApply: false
---
### React Server Components Data Fetching Patterns

#### ⚠️ CRITICAL: Server Components Must NOT be `async`

The fundamental rule for data fetching in React Server Components (RSCs) is that they are **categorically forbidden** from being marked as `async`. An `async` component is a function that returns a `Promise<JSX.Element>`, which completely negates the primary benefits of RSCs: streaming rendering and parallel data fetching. Instead of awaiting data, you must initiate fetches, pass the resulting `Promise` objects to child components, and let React's `<Suspense>` orchestrate the rendering.

### Core Principles

1.  **No `async` Components:** A page or layout server component must never have the `async` keyword.

2.  **Colocate Queries & Export Types:** Drizzle-prepared statements **must** be colocated in the same file as the page or layout component that initiates the fetch. This improves maintainability and clarity. You **must** also export the derived data type for use in child components using the `Awaited<ReturnType<typeof queryName.execute>>[number]` pattern.

3.  **Initiate Fetches & Pass Promises:** The parent server component should initiate all required data fetches. It should **NOT** `await` these fetches. The resulting `Promise` objects must be passed directly as props to the child components that will render the data. This allows data fetching to happen in parallel.

4.  **Handle `params` as Promises:** In Next.js 15+, the `params` and `searchParams` objects passed to page components are themselves `Promise` objects. You cannot access their values directly. To use a route parameter in a query, you must chain off the `params` promise using `.then()`.

5.  **Wrap in `<React.Suspense>`:** Any component that receives a promise as a prop must be wrapped in a `<React.Suspense>` boundary. The boundary will render a `fallback` UI (e.g., a loading skeleton) while the promise is pending, allowing the rest of the page to stream to the client without being blocked.

6.  **⚠️ CRITICAL: Components Using `React.use()` Must Be Client Components:** Any component that directly calls the `React.use()` hook to consume a promise **MUST** be a Client Component, marked with the `"use client"` directive at the top of the file. Although `React.use()` can suspend rendering on the server during the initial RSC pass, the hook itself is only permitted within the client component model. This enforces a clean separation of concerns: Server Components initiate and pass promises, while dedicated child Client Components consume them.

7.  **Consume Promises with `React.use()`:** Inside the child **Client Component**, use the `React.use()` hook to read the value from the promise. This hook seamlessly integrates with Suspense, telling React to pause rendering of *only that component* until the data is resolved.

### Comprehensive Example

This example demonstrates fetching conversation history for a specific prospect. It correctly handles the `params` promise, chains database fetches, and demonstrates the mandatory separation between the parent Server Component and the child Client Component.

#### `src/app/(dashboard)/conversations/[prospectId]/page.tsx` (Parent Server Component)

This component correctly extracts the `prospectId` from the `params` promise, chains multiple database fetches, and passes the resulting promises to a child Client Component.

```typescript
import * as React from "react"
import { and, desc, eq, sql } from "drizzle-orm"
import { redirect } from "next/navigation"
// Child component is imported. It MUST be a Client Component.
import { ConversationDetail } from "@/components/conversation-detail"
import { getUserId } from "@/server/auth"
import { db } from "@/server/db"
import * as schema from "@/server/db/schema"

// 1. Drizzle prepared statements are colocated with the page.
const getProspectDetails = db
	.select({
		id: schema.prospect.id,
		name: sql<string>`COALESCE(${schema.prospect.name}, 'Unnamed Customer')`,
		email: schema.prospect.email,
		phone: schema.prospect.phone,
		createdAt: schema.prospect.createdAt
	})
	.from(schema.prospect)
	.where(eq(schema.prospect.id, sql.placeholder("prospectId")))
	.limit(1)
	.prepare("get_prospect_details")

const getConversationMessages = db
	.select({
		id: schema.message.id,
		content: schema.message.content,
		source: schema.message.source,
		createdAt: schema.message.createdAt,
		userId: schema.message.userId
	})
	.from(schema.message)
	.where(
		and(
			eq(schema.message.prospectId, sql.placeholder("prospectId")),
			eq(schema.message.userId, sql.placeholder("userId"))
		)
	)
	.orderBy(desc(schema.message.createdAt))
	.prepare("get_conversation_messages")

// 2. Types are derived from the queries and exported for child components.
export type ProspectDetails = Awaited<ReturnType<typeof getProspectDetails.execute>>[number]
export type ConversationMessage = Awaited<ReturnType<typeof getConversationMessages.execute>>[number]

// 3. The page component is NOT async and accepts params as a Promise.
export default function Page({
	params
}: {
	params: Promise<{ prospectId: string }>
}) {
	// 4. Extract the prospectId from the params promise.
	const prospectIdPromise = params.then((params) => params.prospectId)
	
	// 5. Get the userId promise.
	const userIdPromise = getUserId()

	// 6. Chain the prospect details fetch with error handling for missing prospects.
	const prospectPromise = prospectIdPromise.then((prospectId) =>
		getProspectDetails
			.execute({ prospectId })
			.then((results) => results[0])
			.then((prospect) => {
				if (!prospect) {
					redirect("/conversations")
				}
				return prospect
			})
	)

	// 7. Chain the conversation messages fetch using both prospectId and userId.
	const messagesPromise = Promise.all([prospectIdPromise, userIdPromise]).then(
		([prospectId, userId]) => getConversationMessages.execute({ prospectId, userId })
	)

	return (
		// 8. The child Client Component is wrapped in <React.Suspense>.
		<React.Suspense fallback={<div>Loading conversation...</div>}>
			{/* 9. Promises are passed directly to the child Client Component. */}
			<ConversationDetail 
				prospectPromise={prospectPromise} 
				messagesPromise={messagesPromise} 
			/>
		</React.Suspense>
	)
}
```

#### `src/components/conversation-detail.tsx` (Child Client Component)

This component **must be a Client Component** because it uses the `React.use` hook. It receives the promises, resolves them, and can contain interactive features like state and event handlers.

```typescript
"use client" // ⚠️ CRITICAL: This directive is required for React.use()

import * as React from "react"
import { Search, MessageCircle, Phone, Mail } from "lucide-react"
// ✅ Types are imported from the parent server component's file.
import type { ProspectDetails, ConversationMessage } from "@/app/(dashboard)/conversations/[prospectId]/page"
import { SearchBar } from "@/components/search-bar"

// The component accepts props as Promises.
export function ConversationDetail(props: { 
	prospectPromise: Promise<ProspectDetails>
	messagesPromise: Promise<ConversationMessage[]>
}) {
	// ✅ `React.use()` unwraps both promises. This is what necessitates "use client".
	// The component's rendering is suspended until the data is resolved.
	const prospect = React.use(props.prospectPromise)
	const messages = React.use(props.messagesPromise)
	
	// State and event handlers can be used because this is a Client Component.
	const [searchTerm, setSearchTerm] = React.useState("")

	const filteredMessages = messages.filter((message) =>
		message.content.toLowerCase().includes(searchTerm.toLowerCase())
	)

	return (
		<div className="space-y-6">
			<div className="flex justify-between items-center">
				<div>
					<h1 className="text-2xl font-bold flex items-center gap-2">
						<MessageCircle size={24} />
						Conversation with {prospect.name}
					</h1>
					<div className="flex gap-4 text-sm text-muted-foreground mt-2">
						{prospect.email && (
							<span className="flex items-center gap-1">
								<Mail size={16} />
								{prospect.email}
							</span>
						)}
						{prospect.phone && (
							<span className="flex items-center gap-1">
								<Phone size={16} />
								{prospect.phone}
							</span>
						)}
					</div>
				</div>
				<SearchBar
					placeholder="Search messages..."
					value={searchTerm}
					onChange={setSearchTerm}
					icon={<Search size={20} />}
				/>
			</div>
			
			<div className="space-y-4">
				{filteredMessages.map((message) => (
					<div 
						key={message.id} 
						className={`p-4 rounded-lg ${
							message.source === 'user' 
								? 'bg-blue-50 ml-8' 
								: 'bg-gray-50 mr-8'
						}`}
					>
						<div className="text-sm text-muted-foreground mb-2">
							{message.source} • {new Date(message.createdAt).toLocaleString()}
						</div>
						<div className="text-sm">{message.content}</div>
					</div>
				))}
			</div>
		</div>
	)
}
```

### Established Pattern: `page.tsx` + `content.tsx` Structure

Through consistent application, we have established a specific file structure pattern that implements the RSC principles above. This pattern provides clean separation between data fetching and view logic while maintaining excellent performance and type safety.

#### File Structure

```
src/app/feature/[param]/
├── page.tsx          // Server Component: data fetching + promise orchestration  
└── content.tsx       // Client Component: view logic + interactivity
```

#### `page.tsx` Responsibilities (Server Component)

1. **Colocate Prepared Statements:** All Drizzle queries used by this route
2. **Export Derived Types:** Type definitions for use in `content.tsx`  
3. **Chain Promise-Based Fetches:** Transform `params` promise into data promises
4. **Orchestrate Loading:** Wrap `content.tsx` in `<React.Suspense>`
5. **Pass Promises as Props:** No `await`ing, just promise passing

```typescript
import * as React from "react"
import { eq, sql } from "drizzle-orm"
import { db } from "@/db"
import * as schema from "@/db/schemas"
import { Content } from "./content"

// 1. Colocated prepared statements
const getUserProfile = db
	.select({
		id: schema.users.id,
		name: schema.users.name,
		email: schema.users.email
	})
	.from(schema.users)
	.where(eq(schema.users.id, sql.placeholder("userId")))
	.prepare("src_app_profile_userid_page_get_user_profile")

// 2. Export derived types
export type UserProfile = Awaited<ReturnType<typeof getUserProfile.execute>>[number]

// 3. Server Component (NOT async)
export default function Page({ params }: { params: Promise<{ userId: string }> }) {
	// 4. Chain promise-based fetches
	const userPromise = params.then((p) => 
		getUserProfile.execute({ userId: p.userId }).then(results => results[0])
	)

	// 5. Orchestrate with Suspense + pass promises
	return (
		<React.Suspense fallback={<div>Loading profile...</div>}>
			<Content userPromise={userPromise} paramsPromise={params} />
		</React.Suspense>
	)
}
```

#### `content.tsx` Responsibilities (Client Component)

1. **Client Component Directive:** Always start with `"use client"`
2. **Import Types:** Use types exported from `page.tsx`
3. **Consume Promises:** Use `React.use()` to unwrap promise data
4. **Handle Interactivity:** All state, event handlers, and user interactions
5. **Render UI:** Focus purely on presentation and user experience

```typescript
"use client"

import * as React from "react"
import { Button } from "@/components/ui/button"
// Import types from the colocated page.tsx
import type { UserProfile } from "./page"

export function Content({ 
	userPromise, 
	paramsPromise 
}: { 
	userPromise: Promise<UserProfile | undefined>
	paramsPromise: Promise<{ userId: string }>
}) {
	// 1. Consume promises with React.use()
	const user = React.use(userPromise)
	const params = React.use(paramsPromise)
	
	// 2. Client-side state and interactivity
	const [isEditing, setIsEditing] = React.useState(false)
	
	// 3. Handle loading/error states
	if (!user) {
		return <div>User not found</div>
	}
	
	// 4. Render UI with full interactivity
	return (
		<div className="space-y-4">
			<h1 className="text-2xl font-bold">{user.name}</h1>
			<p className="text-muted-foreground">{user.email}</p>
			<Button 
				onClick={() => setIsEditing(!isEditing)}
				variant={isEditing ? "destructive" : "default"}
			>
				{isEditing ? "Cancel" : "Edit Profile"}
			</Button>
			{isEditing && (
				<form className="space-y-2">
					{/* Interactive form elements */}
				</form>
			)}
		</div>
	)
}
```

#### Benefits of This Pattern

- **Performance:** Parallel data fetching + streaming rendering
- **Type Safety:** Shared types between server and client components
- **Separation of Concerns:** Data fetching vs. presentation logic clearly separated  
- **Maintainability:** Predictable file structure across the application
- **Reusability:** Content components can be easily tested or reused
- **Progressive Enhancement:** Server-rendered content with client-side interactivity

#### When to Use This Pattern

- **Dynamic routes** with database queries (`[id]`, `[slug]`, etc.)
- **Pages requiring interactivity** (forms, filters, state management)
- **Complex data transformations** that benefit from server-side processing
- **Any route where you need both data fetching and user interactions**

Use this pattern consistently across your application to maintain architectural coherence and leverage the full benefits of React Server Components.

### Anti-Patterns to Avoid

#### ❌ WRONG: `async` Server Component with `await`

This pattern is strictly prohibited. It blocks the entire page from rendering until all data is fetched, negates streaming, and prevents parallel data fetching.

```typescript
// ❌ ANTI-PATTERN: DO NOT DO THIS
export default async function Page({
	params
}: {
	params: Promise<{ prospectId: string }>
}) {
	// ❌ ILLEGAL: `await`ing the params blocks rendering and streaming.
	const { prospectId } = await params
	// ❌ Second await cannot start until the first one is complete (waterfall).
	const userId = await getUserId()
	// ❌ Third await creates a waterfall effect.
	const prospect = await getProspectDetails.execute({ prospectId })

	// The page cannot be sent to the client until all fetches are done.
	return (
		<main>
			{/* This component receives resolved data, not promises. */}
			<ConversationDisplay prospect={prospect} />
		</main>
	)
}
```

#### ❌ WRONG: Using `React.use()` in a Server Component

This is also prohibited. `React.use()` is only permitted in Client Components.

```typescript
// ❌ ANTI-PATTERN: DO NOT DO THIS
// This is a Server Component (no "use client" directive)
export default function MyServerComponent({ dataPromise }: { dataPromise: Promise<Data> }) {
    // ❌ ILLEGAL: `React.use` cannot be called in a Server Component.
    const data = React.use(dataPromise); 

    return <div>{data.name}</div>
}
```