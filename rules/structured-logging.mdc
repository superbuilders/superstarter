---
description: 
globs: *.tsx,*.ts
alwaysApply: false
---
### Structured Logging

All logging MUST use the structured logging library from `@superbuilders/slog`. This library provides Go slog-style structured logging with automatic `toString()` processing and consistent formatting.

#### ⚠️ CRITICAL: Inngest Functions Exception

**For Inngest functions, use the `logger` parameter instead of importing slog directly.** Inngest provides its own logger middleware that handles serverless-specific logging issues like incomplete log flushing and duplicated log deliveries.

```typescript
// ✅ CORRECT: In Inngest functions, use the logger parameter
export const myInngestFunction = inngest.createFunction(
	{ id: "my-function" },
	{ event: "app/some.event" },
	async ({ event, logger }) => {
		logger.info("starting function", { eventId: event.id })
		// Do NOT import slog in Inngest functions
	}
)

// ❌ WRONG: Don't import slog in Inngest functions
import * as logger from "@superbuilders/slog"
export const myInngestFunction = inngest.createFunction(
	{ id: "my-function" },
	{ event: "app/some.event" },
	async ({ event }) => {
		logger.info("starting function", { eventId: event.id }) // This can cause issues
	}
)
```

**Why this exception exists:**
- Serverless functions can terminate before logs are flushed
- Inngest's memoization can cause log statements outside steps to run multiple times
- The Inngest logger is configured with our slog library for consistent formatting

**Outside of Inngest functions** (utility functions, database operations, etc.), continue to use slog directly as documented below.

#### ⚠️ CRITICAL: Logging AND Error Handling Together

**Structured logging provides observability while error handling ensures proper control flow.** Always use BOTH logging and error handling patterns from [error-handling.mdc](mdc:rules/error-handling.mdc) together for:

- **Error propagation:** Log errors for observability before bubbling up to callers
- **Operation failures:** Log failed operations for debugging while halting execution  
- **Validation failures:** Log invalid data context before preventing further processing
- **External operation failures:** Log failed API calls, database operations, file operations with context

**Use `errors.try` and log + throw errors for observability:**

```typescript
// ✅ CORRECT: Log errors for observability AND throw for proper propagation
const result = await errors.try(someOperation())
if (result.error) {
	logger.error("operation failed", { error: result.error })
    throw errors.wrap(result.error, "operation failed")
}

// ❌ WRONG: Silent error handling without logging loses observability
const result = await errors.try(someOperation())
if (result.error) {
	throw errors.wrap(result.error, "operation failed")
}
```

#### Import Pattern

Always import the entire slog module as logger:

```typescript
import * as logger from "@superbuilders/slog"
```

#### ⚠️ CRITICAL: Automatic toString() Processing

**The logging library automatically calls `toString()` on ALL objects with custom `toString()` methods.** This includes Error objects, Date objects, and custom classes. **NEVER manually call `.toString()`** on objects when logging.

```typescript
// ✅ CORRECT: Let the logger handle toString() automatically
logger.error("operation failed", { error: someError })
logger.info("processing user", { user: userObject, timestamp: new Date() })

// ❌ WRONG: Manual toString() calls are redundant
logger.error("operation failed", { error: someError.toString() })
```

#### Our Logging Philosophy: Log Everything

To ensure maximum observability, our default approach is to log verbosely. When in doubt, add a log statement. This is especially true for the `debug` level, which is our primary tool for introspection.

**Always Log (Info Level):**
- Function entry/exit for major operations and workflows.
- Significant state changes (e.g., job status updated to `COMPLETED`).
- High-level summaries of completed work (e.g., "processed 50 articles").

**Always Log (Debug Level):**
- Detailed inputs and outputs for every function or method.
- The exact content of API requests and the raw content of API responses.
- The full prompts sent to AI models.
- Intermediate data transformations and validation results.
- Configuration values being used in a function.
- Every branch in control-flow logic (e.g., if/else statements).

#### Go slog Style Guide

Follow Go's slog idiomatic patterns for terse, structured logging:

**1. Terse Messages**
- Use short, action-oriented verbs: `"starting"`, `"processing"`, `"inserted"`, `"completed"`, `"validating"`
- Keep messages concise and scannable.

**2. Key-Value Attributes**
- Move all contextual data to the attributes object.
- Use structured data instead of string interpolation.

```typescript
// ✅ CORRECT: Terse message with structured attributes
logger.info("starting zim import", { file: outfile, batchSize: 1000 })
logger.debug("validating lyrics", { validationIssues: result.issues })
logger.error("failed to drop schema", { schema: name, error: err })

// ❌ WRONG: Verbose messages with embedded data
logger.info(`Starting ZIM import for ${outfile} with batch size ${1000}`)
logger.error(`Error dropping schema ${name}: ${err}`)
```

#### Consistent Attribute Names

Use standardized camelCase attribute names:

- **`count`** - for quantities, batch sizes, totals
- **`file`** - for file paths and filenames
- **`articleId`** - for article references
- **`error`** - for error objects (automatically converted via toString())
- **`userId`** - for user references
- **`status`** - for HTTP status codes or operation states

#### Log Levels

- **`logger.info()`** - Major operations, user-facing progress, completion status.
- **`logger.debug()`** - **THE DEFAULT FOR DEVELOPMENT.** Use for detailed internal operations, data structures, API payloads, prompts, validation steps, etc.
- **`logger.error()`** - Failures with error context (use before throwing errors for observability).
- **`logger.warn()`** - Recoverable issues, unexpected but non-fatal conditions.

#### Prohibited Patterns

**NEVER use:**
- `console.log`, `console.error`, `console.debug`, `console.warn`
- String interpolation in log messages
- Verbose, explanatory messages
- Silent error handling without logging (always log errors for observability)
- **Manual `.toString()` calls on objects** (the logger does this automatically)
